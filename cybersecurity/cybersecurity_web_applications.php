<?php include '../include/head.php'; ?>
<title>Учебник по кибербезопасности. Веб-приложения. <?php include '../include/title.php'; ?></title>
<meta name='description' content='Веб-приложения. HTTP протокол. URL-адреса, параметры и схема запроса. HTTP Заголовки. HTTP глаголы. Коды ответа HTTP. Rest-сервисы. Сессии & Состояние. Виртуальные хосты. URL кодирование. JavaScript. Шифрование с помощью TLS. Учебник по кибербезопасности. <?php include '../include/description.php'; ?>'>

<?php include '../include/topmenu.php'; ?>
<?php include '../include/leftmenu_cybersecurity.php'; ?>
<?php include '../include/before_content_cybersecurity.php'; ?>

<article>
    <h1>Кибербезопасность. <span class="color_h1">Веб-приложения</span></h1>
    <div class="w3-clear nextprev">
        <a class="w3-left w3-btn" href="cybersecurity_firewalls.php">&#10094; Prev</a>
        <a class="w3-right w3-btn" href="cybersecurity_mapping_port_scanning.php">Next &#10095;</a>
    </div>
    <hr>
    <p class="intro"><strong>Веб-приложения</strong> являются неотъемлемой частью почти всего, что мы делаем, будь то доступ в Интернет или удаленное управление вашей газонокосилкой. В этом вводном классе мы рассмотрим <strong>основы безопасности веб-приложений</strong>.</p>
    <hr>

    <h2>HTTP протокол</h2>
    <p>HTTP - это протокол-носитель, который позволяет браузерам и приложениям получать такой контент, как HTML (язык гипертекстовой разметки), CSS (каскадные таблицы стилей), изображения и видео.</p>
    <hr>

    <h2>URL-адреса, параметры и схема запроса</h2>
    <p>Для доступа к веб-приложению мы используем URL-адрес (Унифицированный указатель ресурсов), например: https://www.google.com/search?q=w3schools+cyber+security&amp;ie=UTF-8</p>
    <p>URL-адрес google.com содержит домен, скрипт, к которому осуществляется доступ, и параметры запроса.</p>
    <p>Скрипт, к которому мы обращаемся, называется /search. Символ / указывает, что он содержится в верхнем каталоге на сервере, где обслуживаются файлы. Символ ? указывает входные параметры скрипта, а символ &amp; разграничивает различные входные параметры. В данном URL входные параметры:</p>
    <ul>
        <li>q со значением кибербезопасности w3schools</li>
        <li>т.е. со значением UTF-8</li>
    </ul>
    <p>Значение этих входных данных определяется приложением веб-серверов.</p>
    <p>Иногда вы увидите просто / или /? указывающие, что скрипт был настроен для обслуживания ответа на этот адрес. Обычно этот скрипт представляет собой что-то вроде индексного файла, который улавливает все запросы, если не указан конкретный скрипт.</p>
    <p>Схема - это то, что определяет используемый протокол. В нашем случае это первая часть URL: https. Когда схема не определена в URL-адресе, это позволяет приложению решать, что использовать. Схемы могут включать в себя целый ряд протоколов, таких как:</p>
    <ul>
        <li>HTTP</li>
        <li>HTTPS</li>
        <li>FTP</li>
        <li>SSH</li>
        <li>SMB</li>
    </ul>
    <hr>

    <h2>HTTP Заголовки</h2>
    <p>Протокол HTTP использует множество заголовков, некоторые из которых настраиваются для приложения, а другие хорошо определены и приняты технологией.</p>
    <p>Пример запроса к http://google.com</p>
    <div class="w3-example">
        <div class="w3-code notranslate">
            GET /search?q=w3schools+cyber+security&amp;ie=UTF-8 HTTP/1.1<br>
            Host: google.com<br>
            User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36<br>
            Accept: image/avif,image/webp,image/apng,image/*,*/*;q=0.8<br>
            Referer: https://w3schools.com/<br>
            Accept-Encoding: gzip, deflate<br>
            Cookie: cookie1=value1;cookie2=value2<br>
        </div>
    </div>
    <p>Заголовок запроса указывает, что клиент хочет выполнить на целевом веб-сервере. Он также содержит информацию о том, принимает ли он сжатие, к какому типу клиента обращается и какие файлы cookie сервер сказал клиенту предоставить. Заголовки HTTP-запроса объясняются здесь:</p>
    <table class="w3-table-all notranslate">
        <tr>
            <th>Заголовок</th>
            <th>Объяснение</th>
        </tr>
        <tr>
            <td>GET /search... HTTP/1.1</td>
            <td>GET - это глагол, который мы используем для доступа к приложению. Подробно объяснено в разделе HTTP-глаголы. Мы также видим путь и параметры запроса и версию HTTP.</td>
        </tr>
        <tr>
            <td>Host: google.com</td>
            <td>Этот заголовок указывает целевую службу, которую мы хотим использовать. Сервер может иметь несколько сервисов, как описано в разделе VHOSTS.</td>
        </tr>
        <tr>
            <td>User-Agent</td>
            <td>Клиентское приложение, которым в большинстве случаев является браузер, может идентифицировать себя по версии, движку и операционной системе.</td>
        </tr>
        <tr>
            <td>Accept</td>
            <td>Определяет, какой контент может принимать клиент</td>
        </tr>
        <tr>
            <td>Referer: https://w3schools.com/</td>
            <td>Если клиент кликнул ссылку с другого веб-сайта, используется заголовок Referer, чтобы указать, откуда пришел клиент.</td>
        </tr>
        <tr>
            <td>Accept-Encoding: gzip, deflate</td>
            <td>Можно ли сжать или закодировать контент? Это определяет, что мы можем принять</td>
        </tr>
        <tr>
            <td>Cookie</td>
            <td>Файлы cookie - это значения, отправленные сервером в предыдущих запросах, которые клиент отправляет обратно в каждом последующем запросе. Подробно объяснено в разделе Состояние</td>
        </tr>
    </table>
    <p>На этот запрос сервер ответит заголовками и содержимым. Примеры заголовков показаны ниже:</p>
    <div class="w3-example">
        <div class="w3-code notranslate">
            HTTP/1.1 200 OK<br>
            Content-Type: text/html<br>
            Set-Cookie: &lt;cookie value&gt;<br>
            &lt;website content&gt;
        </div></div>

    <p>Заголовок и содержимое ответа - вот что определяет то, что мы увидим в браузере. Заголовки ответа HTTP объясняются следующим образом:</p>
    <table class="w3-table-all notranslate">
        <tr>
            <th>Заголовок</th>
            <th>Объяснение</th>
        </tr>
        <tr>
            <td>HTTP/1.1 200 OK</td>
            <td>Код ответа HTTP. Подробно объяснено в разделе &quot;Коды ответа HTTP&quot;.</td>
        </tr>
        <tr>
            <td>Content-Type: text/html</td>
            <td>Задает тип возвращаемого содержимого, например HTML, JSON или XML</td>
        </tr>
        <tr>
            <td>Set-Cookie:</td>
            <td>Любые особые значения, которые клиент должен запомнить и вернуть в следующем запросе.</td>
        </tr>
    </table>
        <hr>

        <h2>HTTP глаголы</h2>
        <p>При доступе к веб-приложению клиент получает инструкции о том, как отправлять данные в веб-приложение. Приложение принимает множество глаголов.</p>
        <table class="w3-table-all notranslate">
            <tr>
                <th>!Verb</th>
                <th>Используется для</th>
            </tr>
            <tr>
                <td>GET</td>
                <td>Обычно используется для получения значений через параметры запроса</td>
            </tr>
            <tr>
                <td>POST</td>
                <td>Используется для отправки данных в сценарий через значения в теле запроса, отправленного на веб-сервер. Обычно это включает создание, загрузку или отправку большого количества данных</td>
            </tr>
            <tr>
                <td>PUT</td>
                <td>Часто используется для загрузки или записи данных на веб-сервер</td>
            </tr>
            <tr>
                <td>DELETE</td>
                <td>Укажите ресурс, который следует удалить</td>
            </tr>
            <tr>
                <td>PATCH</td>
                <td>Может использоваться для обновления ресурса новым значением</td>
            </tr>
        </table>
            <p>Они используются, как того требует веб-приложение. Веб-сервисы Restful (REST) особенно хороши при использовании полного массива HTTP-глаголов для определения того, что следует делать на бэкэнде.</p>
            <hr>

            <h2>Коды ответа HTTP</h2>
            <p>Приложение, работающее на веб-сервере, может отвечать разными кодами в зависимости от того, что произошло на стороне сервера. Перечислены общие коды ответов, которые веб-сервер будет выдавать клиенту, о которых должны знать специалисты по безопасности:</p>
            <table class="w3-table-all notranslate">
                <tr>
                    <th>Код</th>
                    <th>Объяснение</th>
                </tr>
                <tr>
                    <td>200</td>
                    <td>Приложение вернулось нормально</td>
                </tr>
                <tr>
                    <td>301</td>
                    <td>Сервер просит клиента навсегда запомнить перенаправление в новое место, где клиент должен получить доступ</td>
                </tr>
                <tr>
                    <td>302</td>
                    <td>Временно перенаправить. Клиенту не нужно сохранять этот ответ</td>
                </tr>
                <tr>
                    <td>400</td>
                    <td>Клиент сделал неверный запрос</td>
                </tr>
                <tr>
                    <td>403</td>
                    <td>Клиенту не разрешен доступ к этому ресурсу. Требуется авторизация</td>
                </tr>
                <tr>
                    <td>404</td>
                    <td>Клиент попытался получить доступ к несуществующему ресурсу</td>
                </tr>
                <tr>
                    <td>500</td>
                    <td>Ошибка сервера при попытке выполнить запрос</td>
                </tr>
            </table>
            <hr>

            <h2>REST</h2>
            <p>Rest-сервисы, иногда называемые службами RESTful, в полной мере используют HTTP-глаголы и HTTP-коды ответа для облегчения использования веб-приложения. Службы RESTful часто используют части URL-адреса в качестве параметра запроса, чтобы определить, что происходит в веб-приложении. REST обычно используется API (&quot;Application Programming Interfaces&quot; - &quot;Интерфейсы прикладного программирования&quot;).</p>
            <p>URL-адреса REST будут вызывать функции, основанные на различных элементах URL-адреса.</p>
            <p>Пример URL-адреса REST: http://example.com/users/search/w3schools</p>
            <p>Этот URL-адрес будет вызывать функциональность как часть URL-адреса вместо параметров запроса. Мы можем расшифровать URL как:</p>
            <table class="w3-table-all notranslate">
                <tr>
                    <th>Параметр</th>
                    <th>Комментарий</th>
                </tr>
                <tr>
                    <td>users</td>
                    <td>Доступ к пользовательской части функциональности</td>
                </tr>
                <tr>
                    <td>search</td>
                    <td>Доступ к функции поиска</td>
                </tr>
                <tr>
                    <td>w3schools</td>
                    <td>Пользователь для поиска</td>
                </tr>
            </table>
            <hr>

            <h2>Сессии &amp; Состояние</h2>
            <p>Не существует встроенного способа для сервера идентифицировать возвращающегося посетителя в HTTP. Чтобы веб-сервер мог идентифицировать пользователя, секретное значение должно быть передано Клиенту и от него в каждом запросе. Обычно это делается с помощью файлов cookie в заголовках, однако распространены и другие способы, например, с помощью параметров GET и POST или других заголовков. Передача состояния через параметры GET не рекомендуется, поскольку такие параметры часто регистрируются на сервере или в посредниках, таких как прокси.</p>
            <p><img src="../svg/img_http-sessions.svg" alt="HTTP Сессии" style="width:100%;max-width:1280px"></p>
            <p>Вот несколько распространенных примеров файлов cookie, которые позволяют приложению на веб-сервере контролировать сеансы и состояние:</p>
            <ul>
                <li>PHPSESSID</li>
                <li>JSESSIONID</li>
                <li>ASP.NET_SessionID</li>
            </ul>
            <p>Эти значения представляют определенное состояние на сервере, часто называемое сеансом. Это состояние представляет такие вещи, как:</p>
            <ul>
                <li>Каким пользователем вы вошли в систему?</li>
                <li>Привилегии и разрешения</li>
            </ul>
            <p>Важно, чтобы значение сессии, отправленное Клиенту, не могло быть легко угадано или иным образом идентифицировано другими. Если бы они могли, злоумышленник мог бы представить себя другими пользователями веб-приложения.</p>
            <p>Состояние также можно сохранить на клиенте. При этом сервер отправляет все состояния клиенту и полагается на то, что клиент отправляет обратно все элементы. Такие реализации полагаются на шифрование для проверки целостности состояния, запрашиваемого клиентом. Примеры реализаций, использующих это, перечислены ниже:</p>
            <ul>
                <li>JWT ("JSON Web Tokens")</li>
                <li>ASP.Net ViewState</li>
            </ul>
            <p>Вы используете файлы cookie, чтобы пройти этот курс! Вы можете проверить эти файлы cookie в своем веб-браузере, открыв инструменты разработчика. Это делается нажатием <code>F12</code> в браузере, открывающем окно инструментов разработчика. В этом окне вы сможете найти правильное место, где хранятся ваши файлы cookie.</p>
            <p><img src="../images/img_web-developerconsole-cookies.png" alt="Консоль разработчика" style="width:100%;max-width:1280px"></p>
            <p>В Google Chrome файлы cookie были идентифицированы на вкладке "Приложение" выше.</p>
            <div class="w3-panel w3-note"><b>Примечание</b>: Можете ли вы догадаться, почему файлы cookie были замаскированы на скриншоте, чтобы вы не могли их прочитать?</div>
            <hr>

            <h2>Виртуальные хосты</h2>
            <p>Один веб-сервер может обрабатывать множество приложений через виртуальные хосты, часто сокращенно Vhosts. Чтобы облегчить доступ к другим виртуальным хостам, веб-сервер обычно считывает заголовок хоста клиентского запроса и на основе этого значения отправляет запрос в правильное приложение.</p>
            <p><img src="../svg/img_vhosts.svg" alt="Virtual Hosts" style="width:100%;max-width:1280px"></p>
            <hr>

            <h2>URL кодирование</h2>
            <p>Чтобы приложение могло безопасно передавать контент между сервером и клиентом, некоторые символы должны быть закодированы, чтобы гарантировать, что они не влияют на протокол. Для сохранения целостности сообщений используется кодировка URL.</p>
            <p>Кодировка URL заменяет небезопасные символы знаком % и двумя шестнадцатеричными цифрами. Например:</p>
            <ul>
                <li>Процент заменяется на %25</li>
                <li>Пробел заменяется на %20</li>
                <li>Кавычки заменены на %22</li>
            </ul>
            <p>CyberChef - отличный инструмент для анализа текста и выполнения таких операций, как декодирование URL. Вы можете попробовать его в своём браузере здесь: <a href="https://gchq.github.io/CyberChef/" target="_blank" rel="noopener">https://gchq.github.io/CyberChef/</a></p>

            <div class="w3-panel w3-note"><b>Примечание</b>: Поиграйте с Cyber Chef и посмотрите, сможете ли вы узнать, что содержится в следующем сообщении в символах, закодированных в URL: %48 %65 %6c %6c %6f %20 %64 %65 %61 %72 %20 %77 %33 %73 %63 %68 %6f %6f %6c %73 %20 %73 %74 %75 %64 %65 %6e %74 %2e %20 %48 %6f %70 %65 %20 %79 %6f %75 %20 %61 %72 %65 %20 %6c %65 %61 %72 %6e %69 %6e %67 %20 %73 %6f %6d %65 %74 %68 %69 %6e %67 %20 %74 %6f %64 %61 %79 %21</div>
            <hr>

            <h2>JavaScript</h2>
            <p>Для поддержки динамического содержимого браузеры используют скриптовый язык JavaScript. Это позволяет разработчикам программировать решения, которые будут работать на клиенте, обеспечивая более интерактивный и &quot;живой&quot; веб-контент.</p>
            <p>JavaScript также участвует во многих атаках на веб-приложения и клиентские приложения, такие как браузеры.</p>
            <hr>

            <h2>Шифрование с помощью TLS</h2>
            <p>Протокол HTTP не поддерживает шифрование передаваемых данных, поэтому для поддержки шифрования добавляется оболочка HTTP. Это обозначается буквой S после HTTP, т.е. HTTPS.</p>
            <p>Раньше использовалось шифрование SSL (&quot;Secure Sockets Layer&quot; - &quot;Уровень защищенных гнезд&quot;), но с тех пор оно устарело. Вместо этого для обеспечения шифрования обычно используется TLS (&quot;Transport Layer Security&quot; - &quot;Безопасность транспортного уровня&quot;).</p>
            <hr>
            <div class="w3-clear nextprev">
                <a class="w3-left w3-btn" href="cybersecurity_firewalls.php">&#10094; Prev</a>
                <a class="w3-right w3-btn" href="cybersecurity_mapping_port_scanning.php">Next &#10095;</a>
            </div>
</article>
<?php include '../include/addown_content.php'; ?>
</div>
<?php include '../include/rightbar.php'; ?>
<?php include '../include/footer.php'; ?>