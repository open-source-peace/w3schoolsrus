<?php include '../include/head.php'; ?>

  <title>AppML История. <?php include '../include/title.php'; ?></title>
  <meta name='description' content='AppML История появления и развития. Как все было? В 1999 году Refsnes Data разработала первую версию AppML. Позже этот метод стал известен как AJAX. Система на основе AppML была запущена в 2001 году. Учебник по AppML. <?php include '../include/description.php'; ?>'>
  <link rel='canonical' href='https://w3schoolsrus.github.io/appml/appml_history.html' />
<?php include '../include/topmenu.php'; ?>
<?php include '../include/leftmenu_appml.php'; ?>
<?php include '../include/before_content_appml.php'; ?>

  <article>
    <h1><span class="color_h1">AppML</span> История</h1>
    <div class="w3-clear nextprev">
      <a class="w3-left w3-button w3-green" href="appml_architecture.php">&#10094; Prev</a>
      <a class="w3-right w3-button w3-green" href="index.php">Next &#10095;</a>
    </div>
    <hr>

    <p>В 1999 году <strong>Refsnes Data</strong> разработала первую версию <strong>AppML</strong>.</p>
    <p>Уже тогда AppML был основан на передаче HTTP-запросов между веб-клиентом и веб-сервером. Позже этот метод стал известен как AJAX.</p>
    <p>В сентябре 2000 года был начат проект по развитию для крупного норвежского заказчика. Целью проекта было преобразование огромной информационной системы (около 300 приложений) из настольного приложения Windows в современное Интернет-приложение, используя только AppML.</p>
    <p>Система на основе AppML была запущена в 2001 году, на несколько месяцев раньше запланированного срока, как первое в мире коммерческое приложение AJAX. Проект имел огромный успех, время разработки сократилось на 75% по сравнению с обычной веб-разработкой. С тех пор были добавлены новые приложения, и теперь система охватывает более 1000 работающих приложений.</p>
    <p>В феврале 2015 года W3Schools повторно запустила AppML как новый продукт, открытый для всех.</p>
    <p>Цели разработки AppML:</p>
    <ul>
      <li>Приложения AppML должны работать через Интернет;</li>
      <li>Приложения AppML должны быть независимыми от платформы;</li>
      <li>Приложения AppML должны использовать только стандарты Интернета (HTML, CSS, JavaScript);</li>
      <li>Приложения AppML должны поддерживать различные потребности приложений;</li>
      <li>Приложения AppML должны иметь самоописание;</li>
      <li>Приложения AppML должны быть простыми в разработке, обслуживании и изменении;</li>
      <li>Приложения AppML должны быть ориентированы на будущее.</li>
    </ul>
    <p class="intro">В нижеследующих параграфах описывается исходное видение Refsnes Data (1999 г.) будущих веб-приложений.</p>
    <hr>

    <h2>Исполняемые файлы умрут, JavaScript будет жить</h2>
    <p>Скомпилированные исполняемые файлы (скомпилированные из таких языков, как C или Java) не могут работать на другом оборудовании.</p>
    <p>Исполняемые файлы (EXE-файлы, объекты ActiveX и COM, DLL-файлы) - это компоненты, препятствующие разработке приложений, которые могут запускаться через Интернет.</p>
    <p>Будущее приложение не будет использовать исполняемые файлы или любые другие компоненты, установленные на клиентском компьютере, и не будет полагаться на них.</p>
    <p><strong>Наши предложения:</strong></p>
    <p>Пишите свои будущие приложения, используя только HTML, CSS и JavaScript.</p>
    <p>Убедитесь, что ваши будущие приложения работают в любом веб-браузере.</p>
    <hr>

    <h2>Веб-приложения станут интернет-сервисами</h2>
    <p>История полна больших, специально созданных приложений. Многие из них умерли очень быстро, потому что не смогли пережить изменения требований.</p>
    <p>Приложения должны быть гибкими, универсальными и плавно приспосабливаться к изменениям, не сыпаться и не разрушаться.</p>
    <p>Приложения должны иметь возможность масштабирования от поддержки нескольких до миллионов запросов в день.</p>
    <p>Приложения должны иметь возможность распространяться с одного сервера на многие или перемещаться между серверами, не нарушая работу приложения.</p>
    <p>Приложения должны иметь возможность взаимодействовать с другими приложениями.</p>

    <p>Приложения не должны содержать большой объем кода.</p>
    <p>Приложения следует разбивать на более мелкие службы, которые легко создавать и легко поддерживать.</p>
    <p>Приложения должны представлять собой набор интернет-сервисов, которые могут возвращать данные для отправленных интернет-запросов.</p>
    <p>Приложения должны запрашивать услуги через стандартные интернет-протоколы без постоянного подключения к серверу.</p>
    <p><strong>Наши предложения:</strong></p>
    <p>Напишите свои будущие приложения, использующие Интернет, базирующиеся на SOA (Service Oriented Architecture - Сервис-Ориентированная Архитектура).</p>

    <p>Сделайте свои сервисы приложений универсальными и гибкими, готовыми к обслуживанию различных типов запросов.</p>
    <hr>
    <h2>Будущие приложения будет легко создавать и редактировать</h2>
    <p>Клиенты и серверы будут обмениваться данными простым и понятным способом.</p>
    <p>Приложения не будут кодироваться, если этого можно будет избежать.</p>
    <p>Приложения будут создаваться и изменяться путем редактирования моделей, а не путем редактирования кода.</p>
    <p>Описания приложений будут доступны для чтения людям.</p>
    <p>Описания приложений будут самоописательными.</p>
    <p>Приложения будут писать пользователи, а не программисты.</p>
    <p><strong>Наши предложения:</strong></p>
    <p>Используйте удобочитаемые текстовые файлы для описания услуг и предоставляйте услуги, выполняя эти описания.</p>
    <p>Используйте текстовые файлы (например, файлы JSON) для описания приложений.</p>
    <p>Используйте текстовые файлы (например, файлы JSON) для обмена данными.</p>
    <p>Используйте HTML, CSS и JavaScript для выполнения приложений.</p>
    <hr>

    <h2>Три маленьких веб-разработчика...</h2>
    <p>Давным-давно было три маленьких веб-разработчика, разрабатывающих новый веб-сайт.</p>
    <p>1. Первый веб-разработчик использовал AppML.</p>
    <p>2. Второй веб-разработчик использовал свой любимый язык серверного программирования.</p>
    <p>3. Третий веб-разработчик использовал профессиональный фреймворк корпоративной веб-разработки.</p>
    <p>Первый веб-разработчик запустил демоверсию за два дня. После совместной работы с пользователями за неделю был готов готовый прототип. И после двух недель тестирования интеллектуальный, быстрый и простой в использовании веб-сайт был готов к публикации.</p>
    <p>Второй веб-разработчик подготовил свой веб-сайт через 6 месяцев. Но WWW изменила свои требования и не была удовлетворена. Веб-разработчик не мог внести серьезных изменений в свой проект, потому что он содержал слишком много кода. Итак, он начал разработку версии 2.</p>
    <p>Третий веб-разработчик так и не смог завершить свою работу. Фреймворк для профессиональной веб-разработки был очень сложен в использовании, очень труден для понимания и его было почти невозможно протестировать.</p>
    <p><a href="appml_cases.php">Посмотрите, как это сделал первый разработчик</a>.</p>

    <hr>
    <div class="w3-clear nextprev">
      <a class="w3-left w3-button w3-green" href="appml_architecture.php">&#10094; Prev</a>
      <a class="w3-right w3-button w3-green" href="index.php">Next &#10095;</a>
    </div>
  </article>
<?php include '../include/addown_content.php'; ?>
  </div>
<?php include '../include/rightbar.php'; ?>
<?php include '../include/footer.php'; ?>