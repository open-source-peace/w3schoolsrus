<?php include '../include/head.php'; ?>

<title>Введение в JavaScript. <?php include '../include/title_jslearn.php'; ?></title>
<meta name='description' content='Введение в JavaScript. Уроки для новичков. <?php include '../include/description_jslearn.php'; ?>'>

<?php include '../include/topmenu.php'; ?>
<?php include '../include/leftmenu_jslearn.php'; ?>
<?php include '../include/before_content_jslearn.php'; ?>

<article>
  <h1>Введение в JavaScript</h1>
  <div class='w3-clear nextprev'>
    <a class='w3-left w3-btn' href='index.php'>&#10094; Prev</a>
    <a class='w3-right w3-btn' href='manuals_specifications.php'>Next &#10095;</a>
  </div>
  <p>Давайте посмотрим, что такого особенного в <strong>JavaScript</strong>, чего можно достичь с его помощью и какие другие технологии хорошо с ним работают.</p>
  <hr>
  <h2>Что такое JavaScript?</h2>
  <p>Изначально <strong>JavaScript</strong> был создан, чтобы «сделать веб-страницы живыми».</p>
  <p>Программы на <strong>JavaScript</strong> называются скриптами. Они могут встраиваться в <strong>HTML</strong> и выполняться автоматически при загрузке веб-страницы.</p>
  <p>Скрипты распространяются и выполняются, как простой текст. Им не нужна специальная подготовка или компиляция для запуска.</p>
  <p>Это отличает <strong>JavaScript</strong> от другого языка – <strong>Java</strong>.</p>
  <hr>
  <div class="w3-panel w3-note">
  <h2>Почему JavaScript?</h2>
  <p>Когда JavaScript создавался, у него было другое имя – «LiveScript». Однако, язык Java был очень популярен в то время, и было решено, что позиционирование JavaScript как «младшего брата» Java будет полезно.</p>
  <p>Со временем JavaScript стал полностью независимым языком со своей собственной спецификацией, называющейся ECMAScript, и сейчас не имеет никакого отношения к Java.</p>
  </div>
  <hr>
  <p>Сегодня JavaScript может выполняться не только в браузере, но и на сервере или на любом другом устройстве, которое имеет специальную программу, называющуюся &quot;движком&quot; JavaScript.</p>
  <p>У браузера есть собственный движок, который иногда называют &quot;виртуальная машина JavaScript&quot;.</p>
  <p>Разные движки имеют разные &quot;кодовые имена&quot;. Например:</p>
    <ul>
        <li><a href="https://ru.wikipedia.org/wiki/V8_(движок_JavaScript)" target="_blank">V8</a> – в Chrome и Opera.</li>
        <li><a href="https://ru.wikipedia.org/wiki/SpiderMonkey" target="_blank">SpiderMonkey</a> – в Firefox.</li>
        <li>…Ещё есть <a href="https://ru.wikipedia.org/wiki/Microsoft_Trident" target="_blank">&quot;Trident&quot;</a> и &quot;Chakra&quot; для разных версий IE,
            <a href="https://en.wikipedia.org/wiki/Chakra_(JavaScript_engine)">&quot;ChakraCore&quot;</a> для Microsoft Edge, &quot;Nitro&quot; и &quot;SquirrelFish&quot; для Safari и т.д.</li>
    </ul>
    <p>Эти названия полезно знать, так как они часто используются в статьях для разработчиков. Мы тоже будем их использовать. Например, если &quot;функциональность X поддерживается V8&quot;, тогда &quot;Х&quot;, скорее всего, работает в Chrome и Opera.</p>
    <hr>
    <h2>Как работают движки?</h2>
    <p>Движки сложны. Но основы понять легко.</p>
    <ol>
        <li>Движок (встроенный, если это браузер) читает («парсит») текст скрипта.</li>
        <li>Затем он преобразует («компилирует») скрипт в машинный язык.</li>
        <li>После этого машинный код запускается и работает достаточно быстро.</li>
    </ol>
    <p>Движок применяет оптимизации на каждом этапе. Он даже просматривает скомпилированный скрипт во время его работы, анализируя проходящие через него данные, и применяет оптимизации к машинному коду, полагаясь на полученные знания. В результате скрипты работают очень быстро.</p>
    <hr>
    <h2>Что может JavaScript в браузере?</h2>
    <p>Современный JavaScript – это «безопасный» язык программирования. Он не предоставляет низкоуровневый доступ к памяти или процессору, потому что изначально был создан для браузеров, не требующих этого.</p>
    <p>Возможности JavaScript сильно зависят от окружения, в котором он работает. Например, Node.JS поддерживает функции чтения/записи произвольных файлов, выполнения сетевых запросов и т.д.</p>
    <p>В браузере для JavaScript доступно всё, что связано с манипулированием веб-страницами, взаимодействием с пользователем и веб-сервером.</p>
    <p>Например, в браузере JavaScript может:</p>
    <ul>
        <li>Добавлять новый HTML-код на страницу, изменять существующее содержимое, модифицировать стили.</li>
        <li>Реагировать на действия пользователя, щелчки мыши, перемещения указателя, нажатия клавиш.</li>
        <li>Отправлять сетевые запросы на удалённые сервера, скачивать и загружать файлы (технологии AJAX и COMET).</li>
        <li>Получать и устанавливать куки, задавать вопросы посетителю, показывать сообщения.</li>
        <li>Запоминать данные на стороне клиента («local storage»).</li>
    </ul>
    <hr>
    <h2>Что НЕ может JavaScript в браузере?</h2>
    <p>Возможности JavaScript в браузере ограничены ради безопасности пользователя. Цель заключается в предотвращении доступа недобросовестной веб-страницы к личной информации или нанесения ущерба данным пользователя.</p>
    <p>Примеры таких ограничений включают в себя:</p>
    <ul>
        <li>
            <p>JavaScript на веб-странице не может читать/записывать произвольные файлы на жёстком диске, копировать их или запускать программы. Он не имеет прямого доступа к системным функциям ОС.</p>
            <p>Современные браузеры позволяют ему работать с файлами, но с ограниченным доступом, и предоставляют его, только если пользователь выполняет определённые действия, такие как «перетаскивание» файла в окно браузера или его выбор с помощью тега <code class="w3-codespan" >&lt;input&gt;</code>.</p>
            <p>Существуют способы взаимодействия с камерой/микрофоном и другими устройствами, но они требуют явного разрешения пользователя. Таким образом, страница с поддержкой JavaScript не может незаметно включить веб-камеру, наблюдать за происходящим и отправлять информацию в <a href="https://en.wikipedia.org/wiki/National_Security_Agency">НАБ</a>.</p>
        </li>
        <li>
            <p>Различные окна/вкладки не знают друг о друге. Иногда одно окно, используя JavaScript, открывает другое окно. Но даже в этом случае JavaScript с одной страницы не имеет доступа к другой, если они пришли с разных сайтов (с другого домена, протокола или порта).</p>
            <p>Это называется «Политика одинакового источника» (Same Origin Policy). Чтобы обойти это ограничение, обе страницы должны согласиться с этим и содержать JavaScript-код, который специальным образом обменивается данными.</p>
            <p>Это ограничение необходимо, опять же, для безопасности пользователя. Страница <code>https://anysite.com</code>, которую открыл пользователь, не должна иметь доступ к другой вкладке браузера с URL <code>https://gmail.com</code> и воровать информацию оттуда.</p>
        </li>
        <li>
            <p>JavaScript может легко взаимодействовать с сервером, с которого пришла текущая страница. Но его способность получать данные с других сайтов/доменов ограничена. Хотя это возможно в принципе, для чего требуется явное согласие (выраженное в заголовках HTTP) с удалённой стороной. Опять же, это ограничение безопасности.</p>
        </li>
    </ul>
    <p><img src='../svg/limitations.svg' alt='JavaScript. Уроки для начинающих' class='w3-padding' title='JavaScript для начинающих. W3Schools на русском' style="width:100%"></p>
    <p>Подобные ограничения не действуют, если JavaScript используется вне браузера, например — на сервере. Современные браузеры предоставляют плагины/расширения, с помощью которых можно запрашивать дополнительные разрешения.</p>
    <hr>
    <h2>Что делает JavaScript особенным?</h2>
    <p>Как минимум, три сильные стороны JavaScript:</p>
    <ul>
        <li>Полная интеграция с HTML/CSS.</li>
        <li>Простые вещи делаются просто.</li>
        <li>Поддерживается всеми основными браузерами и включён по умолчанию.</li>
    </ul>
    <p>JavaScript – это единственная браузерная технология, сочетающая в себе все эти три вещи.</p>
    <p>Вот что делает JavaScript особенным. Вот почему это самый распространённый инструмент для создания интерфейсов в браузере.</p>
    <p>Хотя, конечно, JavaScript позволяет делать приложения не только в браузерах, но и на сервере, на мобильных устройствах и т.п.</p>
    <hr>
    <h2>Языки «над» JavaScript</h2>
    <p>Синтаксис JavaScript подходит не под все нужды. Разные люди хотят иметь разные возможности.</p>
    <p>Это естественно, потому что проекты разные и требования к ним тоже разные.</p>
    <p>Так, в последнее время появилось много новых языков, которые транспилируются (конвертируются) в JavaScript, прежде чем запустятся в браузере.</p>
    <p>Современные инструменты делают транспиляцию очень быстрой и прозрачной, фактически позволяя разработчикам писать код на другом языке, автоматически преобразуя его в JavaScript «под капотом».</p>
    <h3>Примеры таких языков:</h3>
    <ul>
        <li><a href="http://coffeescript.org/" target="_blank" rel="nofollow">CoffeeScript</a> добавляет «синтаксический сахар» для JavaScript. Он вводит более короткий синтаксис, который позволяет писать чистый и лаконичный код. Обычно такое нравится Ruby-программистам.</li>
        <li><a href="https://www.typescriptlang.org/" target="_blank" rel="nofollow">TypeScript</a> концентрируется на добавлении «строгой типизации» для упрощения разработки и поддержки больших и сложных систем. Разработан Microsoft.</li>
        <li><a href="https://flow.org/" target="_blank" rel="nofollow">Flow</a> тоже добавляет типизацию, но иначе. Разработан Facebook.</li>
        <li><a href="https://dart.dev/" target="_blank" rel="nofollow">Dart</a> стоит особняком, потому что имеет собственный движок, работающий вне браузера (например, в мобильных приложениях). Первоначально был предложен Google, как замена JavaScript, но на данный момент необходима его транспиляция для запуска так же, как для вышеперечисленных языков.</li>
        <li><a href="https://brython.info/" target="_blank" rel="nofollow">Brython</a> транспилирует Python в JavaScript, что позволяет писать приложения на чистом Python без JavaScript.</li>
    </ul>
    <p>Есть и другие. Но даже если мы используем один из этих языков, мы должны знать JavaScript, чтобы действительно понимать, что мы делаем.</p>
    <hr>
    <h3>Резюме</h3>
    <ul>
        <li>JavaScript изначально создавался только для браузера, но сейчас используется на многих других платформах.</li>
        <li>Сегодня JavaScript занимает уникальную позицию в качестве самого распространённого языка для браузера, обладающего полной интеграцией с HTML/CSS.</li>
        <li>Многие языки могут быть «транспилированы» в JavaScript для предоставления дополнительных функций. Рекомендуется хотя бы кратко рассмотреть их после освоения JavaScript.</li>
    </ul>
    <hr>
    <div class='w3-clear nextprev'>
        <a class='w3-left w3-btn' href='index.php'>&#10094; Prev</a>
        <a class='w3-right w3-btn' href='manuals_specifications.php'>Next &#10095;</a>
    </div>
</article>
<?php include '../include/addown_content.php'; ?>
</div>
<?php include '../include/rightbar.php'; ?>
<?php include '../include/footer.php'; ?>