<?php include '../include/head.php'; ?>

<title>Переменные JavaScript. <?php include '../include/title_jslearn.php'; ?></title>
<meta name='description' content='Переменные в JavaScript. Различия между var и let. Объявление переменных. <?php include '../include/description_jslearn.php'; ?>'>
<link rel='stylesheet' href='../styles/accordion.css'>

<?php include '../include/topmenu.php'; ?>
<?php include '../include/leftmenu_jslearn.php'; ?>
<?php include '../include/before_content_jslearn.php'; ?>

<article>
  <h1>JavaScript Переменные</h1>
  <div class='w3-clear nextprev'>
    <a class='w3-left w3-btn' href='strict_mode.php'>&#10094; Prev</a>
    <a class='w3-right w3-btn' href='types.php'>Next &#10095;</a>
  </div>
  <hr>
  <p>JavaScript-приложению обычно нужно работать с информацией. Например:</p>
  <ul>
    <li>Интернет-магазин – информация может включать продаваемые товары и корзину покупок.</li>
    <li>Чат – информация может включать пользователей, сообщения и многое другое.</li>
  </ul>
  <p>Переменные используются для хранения этой информации.</p>
  <hr>
  <h2>Переменная</h2>
  <p><a href="https://ru.wikipedia.org/wiki/Переменная_(программирование)" target="_blank" rel="nofollow">Переменная</a> – это «именованное хранилище» для данных. Мы можем использовать переменные для хранения товаров, посетителей и других данных.</p>
  <p>Для создания переменной в JavaScript используйте ключевое слово <code>let</code>.<p>
  <p>Приведённая ниже инструкция создаёт (другими словами: <i>объявляет</i> или <i>определяет</i>) переменную с именем «message»:</p>
  <div class='w3-example'>
    <div class='w3-code notranslate jsHigh'>
      let message;
    </div>
  </div>
  <p>Теперь можно поместить в неё данные, используя оператор присваивания <code>=</code> :</p>
  <div class='w3-example'>
    <div class='w3-code notranslate jsHigh'>
      let message;<br>
      message = 'Hello'; // сохранить строку<br>
    </div>
  </div>
  <p>Строка сохраняется в области памяти, связанной с переменной. Мы можем получить к ней доступ, используя имя переменной:</p>
  <div class='w3-example'>
    <div class='w3-code notranslate jsHigh'>
      let message;<br>
      message = 'Hello!';<br>
      alert(message); // показывает содержимое переменной
    </div>
  </div>
  <p>Для краткости можно совместить объявление переменной и запись данных в одну строку:</p>
  <div class='w3-example'>
    <div class='w3-code notranslate jsHigh'>
      let message = 'Hello!'; // определяем переменную и присваиваем ей значение<br>
      alert(message); // Hello!
    </div>
  </div>
  <p>Мы также можем объявить несколько переменных в одной строке:</p>
  <div class='w3-example'>
    <div class='w3-code notranslate jsHigh'>
      let user = 'John', age = 25, message = 'Hello';
    </div>
  </div>
  <p>Такой способ может показаться короче, но мы не рекомендуем его. Для лучшей читаемости объявляйте каждую переменную на новой строке.</p>
  <p>Многострочный вариант немного длиннее, но легче для чтения:</p>
  <div class='w3-example'>
    <div class='w3-code notranslate jsHigh'>
      let user = 'John';<br>
      let age = 25;<br>
      let message = 'Hello';
    </div>
  </div>
  <p>Некоторые кодеры также определяют несколько переменных в таком вот многострочном стиле:</p>
  <div class='w3-example'>
    <div class='w3-code notranslate jsHigh'>
      let user = 'John',<br>
      &nbsp;&nbsp;age = 25,<br>
      &nbsp;&nbsp;message = 'Hello';
    </div>
  </div>
  <p>…Или даже с запятой в начале строки:</p>
  <div class='w3-example'>
    <div class='w3-code notranslate jsHigh'>
      let user = 'John'<br>
      &nbsp;&nbsp;, age = 25<br>
      &nbsp;&nbsp;, message = 'Hello';
    </div>
  </div>
  <p>В принципе, все эти варианты работают одинаково. Так что это вопрос личного вкуса и эстетики.</p>
  <div class='important'>
    <p><span class='info_sign'>&#x2139;</span><b><code>var</code> вместо <code>let</code></b></p>
    <p>В старых скриптах вы также можете найти другое ключевое слово: <code>var</code> вместо <code>let</code>:</p>
    <div class='w3-code notranslate jsHigh'>
      var message = 'Hello';
    </div>
    <p>Ключевое слово <code>var</code> – почти то же самое, что и <code>let</code>. Оно объявляет переменную, но немного по-другому, «устаревшим» способом.</p>
    <p>Есть тонкие различия между <code>var</code> и <code>let</code>, но они пока не имеют для нас значения. Мы подробно рассмотрим их в главе
      <a href="var.php">Устаревшее ключевое слово "var"</a>.</p>
  </div>
  <hr>
  <h2>Аналогия из жизни</h2>
  <p>Мы легко поймём концепцию «переменной», если представим её в виде «коробки» для данных с уникальным названием на ней.</p>
  <p>Например, переменную <code>message</code> можно представить как коробку с названием <code>"message"</code> и значением <code>"Hello!"</code> внутри:</p>
  <img src="../svg/jslearn_variables1.svg" alt="Переменные в JavaScript">
  <p>Мы можем положить любое значение в коробку.</p>
  <p>Мы также можем изменить его столько раз, сколько захотим:</p>
  <div class='w3-example'>
      <div class='w3-code notranslate jsHigh'>
    let message;<br>
    message = 'Hello!';<br>
    message = 'World!'; // значение изменено<br>
    alert(message);
      </div>
  </div>
  <p>При изменении значения старые данные удаляются из переменной:</p>
  <img src="../svg/jslearn_variables2.svg" alt="Переменные в JavaScript">
  <p>Мы также можем объявить две переменные и скопировать данные из одной в другую.</p>
    <div class='w3-example'>
        <div class='w3-code notranslate jsHigh'>
    let hello = 'Hello world!';<br>
            <br>
    let message;<br>
            <br>
    // копируем значение 'Hello world' из переменной hello в переменную message<br>
    message = hello;<br>
            <br>
    // теперь две переменные содержат одинаковые данные<br>
    alert(hello); // Hello world!<br>
    alert(message); // Hello world!
        </div>
    </div>
    <div class='important'>
        <p><span class='warning_sign'>&#x26a0;</span><b>Повторное объявление вызывает ошибку</b></p>
        <p>Переменная может быть объявлена только один раз.</p>
        <p>Повторное объявление той же переменной является ошибкой:</p>
            <div class='w3-code notranslate jsHigh'>
        let message = "Это";<br>
        <br>
        // повторение ключевого слова 'let' приводит к ошибке<br>
        let message = "Другое"; // SyntaxError: 'message' has already been declared
            </div>
        <p>Поэтому следует объявлять переменную только один раз и затем использовать её уже без <code>let</code>.</p>
    </div>
    <br>
    <div class='important'>
        <p><span class='info_sign'>&#x2139;</span><b>Функциональные языки программирования</b></p>
        <p>Примечательно, что существуют <a href="https://ru.wikipedia.org/wiki/Функциональное_программирование" target="_blank" rel="nofollow">функциональные</a> языки программирования, такие как
            <a href="https://www.scala-lang.org/" target="_blank" rel="nofollow">Scala</a> или <a href="https://www.erlang.org/" target="_blank" rel="nofollow">Erlang</a>, которые запрещают изменять значение переменной.</p>
        <p>В таких языках однажды сохранённое «в коробку» значение остаётся там навсегда. Если нам нужно сохранить что-то другое, язык заставляет нас создать новую коробку (объявить новую переменную). Мы не можем использовать старую переменную.</p>
        <p>Хотя на первый взгляд это может показаться немного странным, эти языки вполне подходят для серьёзной разработки. Более того, есть такая область, как параллельные вычисления, где это ограничение даёт определённые преимущества. Изучение такого языка (даже если вы не планируете использовать его в ближайшее время) рекомендуется для расширения кругозора.</p>
    </div>
    <hr>
    <h2>Имена переменных</h2>
    <p>В JavaScript есть два ограничения, касающиеся имён переменных:</p>
    <ol>
        <li>Имя переменной должно содержать только буквы, цифры или символы <code>$</code> и <code>_</code>.</li>
        <li>Первый символ не должен быть цифрой.</li>
    </ol>
    <p>Примеры допустимых имён:</p>
    <div class='w3-example'>
        <div class='w3-code notranslate jsHigh'>
    let userName;<br>
    let test123;
        </div>
    </div>
    <p>Если имя содержит несколько слов, обычно используется верблюжья нотация, то есть, слова следуют одно за другим, где каждое следующее слово начинается с заглавной буквы: <code>myVeryLongName</code>.</p>
    <p>Самое интересное – знак доллара <code>'$'</code> и подчёркивание <code>'_'</code> также можно использовать в названиях. Это обычные символы, как и буквы, без какого-либо особого значения.</p>
    <p>Эти имена являются допустимыми:</p>
    <div class='w3-example'>
        <div class='w3-code notranslate jsHigh'>
    let $ = 1; // объявили переменную с именем "$"<br>
    let _ = 2; // а теперь переменную с именем "_"<br>
    <br>
    alert($ + _); // 3
        </div>
    </div>
    <p>Примеры неправильных имён переменных:</p>
    <div class='w3-example'>
        <div class='w3-code notranslate jsHigh'>
    let 1a; // не может начинаться с цифры<br>
    <br>
    let my-name; // дефис '-' не разрешён в имени
        </div>
    </div>
    <div class='important'>
        <p><span class='info_sign'>&#x2139;</span><b>Регистр имеет значение</b></p>
        <p>Переменные с именами <code>apple</code> и <code>AppLE</code> – это две разные переменные.</p>
    </div>
    <br>
    <div class='important'>
        <p><span class='info_sign'>&#x2139;</span><b>Нелатинские буквы разрешены, но не рекомендуются</b></p>
        <p>Можно использовать любой язык, включая кириллицу или даже иероглифы, например:</p>
        <div class='w3-code notranslate jsHigh'>
            let имя = '...';<br>
            let 我 = '...';
        </div>
        <p>Технически здесь нет ошибки, такие имена разрешены, но есть международная традиция использовать английский язык в именах переменных. Даже если мы пишем небольшой скрипт, у него может быть долгая жизнь впереди. Людям из других стран, возможно, придётся прочесть его не один раз.</p>
    </div>
    <br>
    <div class='important'>
        <p><span class='warning_sign'>&#x26a0;</span><b>Зарезервированные имена</b></p>
        <p>Существует список зарезервированных слов, которые нельзя использовать в качестве имён переменных, потому что они используются самим языком.</p>
        <p>Например: <code>let</code>, <code>class</code>, <code>return</code> и <code>function</code> зарезервированы.</p>
        <p>Приведённый ниже код даёт синтаксическую ошибку:</p>
        <div class='w3-code notranslate jsHigh'>
            let let = 5; // нельзя назвать переменную "let", ошибка!<br>
            let return = 5; // также нельзя назвать переменную "return", ошибка!
        </div>
    </div>
    <br>
    <div class='important'>
        <p><span class='warning_sign'>&#x26a0;</span><b>Создание переменной без использования <code>use strict</code></b></p>
        <p>Обычно нам нужно определить переменную перед её использованием. Но в старые времена было технически возможно создать переменную простым присвоением значения без использования <code>let</code>. Это все ещё работает, если мы не включаем <code>use strict</code> в наших файлах, чтобы обеспечить совместимость со старыми скриптами.</p>
        <div class='w3-code notranslate jsHigh'>
            // заметка: "use strict" в этом примере не используется<br>
            <br>
            num = 5; // если переменная "num" раньше не существовала, она создаётся<br>
            <br>
            alert(num); // 5
        </div>
        <p>Это плохая практика, которая приводит к ошибке в строгом режиме:</p>
        <div class='w3-code notranslate jsHigh'>
        "use strict";<br>
            <br>
        num = 5; // ошибка: num is not defined
        </div>
    </div>
    <hr>
    <h2>Константы</h2>
    <p>Чтобы объявить константную, то есть, неизменяемую переменную, используйте <code>const</code> вместо <code>let</code>:</p>
    <div class='w3-example'>
        <div class='w3-code notranslate jsHigh'>
            const myBirthday = '18.04.1982';
        </div>
    </div>
    <p>Переменные, объявленные с помощью <code>const</code>, называются «константами». Их нельзя изменить. Попытка сделать это приведёт к ошибке:</p>
    <div class='w3-example'>
        <div class='w3-code notranslate jsHigh'>
    const myBirthday = '18.04.1982';<br>
            <br>
    myBirthday = '01.01.2001'; // ошибка, константу нельзя перезаписать!
        </div>
    </div>
    <p>Если программист уверен, что переменная никогда не будет меняться, он может гарантировать это и наглядно донести до каждого, объявив её через <code>const</code>.</p>
    <hr>
    <h2>Константы в верхнем регистре</h2>
    <p>Широко распространена практика использования констант в качестве псевдонимов для трудно запоминаемых значений, которые известны до начала исполнения скрипта.</p>
    <p>Названия таких констант пишутся с использованием заглавных букв и подчёркивания.</p>
    <p>Например, сделаем константы для различных цветов в «шестнадцатеричном формате»:</p>
    <div class='w3-example'>
        <div class='w3-code notranslate jsHigh'>
            const COLOR_RED = "#F00";<br>
            const COLOR_GREEN = "#0F0";<br>
            const COLOR_BLUE = "#00F";<br>
            const COLOR_ORANGE = "#FF7F00";<br>
            <br>
            // ...когда нам нужно выбрать цвет<br>
            let color = COLOR_ORANGE;<br>
            alert(color); // #FF7F00
        </div>
    </div>
    <p>Преимущества</p>
    <ul>
        <li><code>COLOR_ORANGE</code> гораздо легче запомнить, чем <code>"#FF7F00"</code>.</li>
        <li>Гораздо легче допустить ошибку при вводе <code>"#FF7F00"</code>, чем при вводе <code>COLOR_ORANGE</code>.</li>
        <li>При чтении кода <code>COLOR_ORANGE</code> намного понятнее, чем <code>#FF7F00</code>.</li>
    </ul>
    <p>Когда мы должны использовать для констант заглавные буквы, а когда называть их нормально? Давайте разберёмся и с этим.</p>
    <p>Название «константа» просто означает, что значение переменной никогда не меняется. Но есть константы, которые известны до выполнения (например, шестнадцатеричное значение для красного цвета), а есть константы, которые вычисляются во время выполнения сценария, но не изменяются после их первоначального назначения.</p>
    <p>Например:</p>
    <div class='w3-example'>
        <div class='w3-code notranslate jsHigh'>
    const pageLoadTime = /* время, потраченное на загрузку веб-страницы */;
        </div>
    </div>
    <p>Значение <code>pageLoadTime</code> неизвестно до загрузки страницы, поэтому её имя записано обычными, а не прописными буквами. Но это всё ещё константа, потому что она не изменяется после назначения.</p>
    <p>Другими словами, константы с именами, записанными заглавными буквами, используются только как псевдонимы для «жёстко закодированных» значений.</p>
    <hr>
    <h2>Придумывайте правильные (корректные) имена</h2>
    <p>В разговоре о переменных необходимо упомянуть, что есть ещё одна чрезвычайно важная вещь.</p>
    <p>Название переменной должно иметь ясный и понятный смысл, говорить о том, какие данные в ней хранятся.</p>
    <p>Именование переменных – это один из самых важных и сложных навыков в программировании. Быстрый взгляд на имена переменных может показать, какой код был написан новичком, а какой – опытным разработчиком.</p>
    <p>В реальном проекте большая часть времени тратится на изменение и расширение существующей кодовой базы, а не на написание чего-то совершенно нового с нуля. Когда мы возвращаемся к коду после какого-то промежутка времени, гораздо легче найти информацию, которая хорошо размечена. Или, другими словами, когда переменные имеют хорошие имена.</p>
    <p>Пожалуйста, потратьте время на обдумывание правильного имени переменной перед её объявлением. Делайте так, и будете вознаграждены.</p>
    <p>Несколько хороших правил:</p>
    <ul>
        <li>Используйте легко читаемые имена, такие как <code>userName</code> или <code>shoppingCart</code>.</li>
        <li>Избегайте использования аббревиатур или коротких имён, таких как <code>a</code>, <code>b</code>, <code>c</code>, за исключением тех случаев, когда вы точно знаете, что так нужно.</li>
        <li>Делайте имена максимально описательными и лаконичными. Примеры плохих имён: <code>data</code> и <code>value</code>. Такие имена ничего не говорят. Их можно использовать только в том случае, если из контекста кода очевидно, какие данные хранит переменная.</li>
        <li>Договоритесь с вашей командой об используемых терминах. Если посетитель сайта называется «user», тогда мы должны называть связанные с ним переменные <code>currentUser</code> или <code>newUser</code>, а не, к примеру, <code>currentVisitor</code> или <code>newManInTown</code>.</li>
    </ul>
    <p>Звучит просто? Действительно, это так, но на практике для создания описательных и кратких имён переменных зачастую требуется подумать. Действуйте.</p>
    <div class='important'>
        <p><span class='info_sign'>&#x2139;</span><b>Повторно использовать или создавать новую переменную?</b></p>
        <p>И последняя заметка. Есть ленивые программисты, которые вместо объявления новых переменных повторно используют существующие.</p>
        <p>В результате их переменные похожи на коробки, в которые люди бросают разные предметы, не меняя на них этикетки. Что сейчас находится внутри коробки? Кто знает? Нам необходимо подойти поближе и проверить.</p>
        <p>Такие программисты немного экономят на объявлении переменных, но теряют в десять раз больше при отладке.</p>
        <p>Дополнительная переменная – это добро, а не зло.</p>
        <p>Современные JavaScript-минификаторы и браузеры оптимизируют код достаточно хорошо, поэтому он не создаёт проблем с производительностью. Использование разных переменных для разных значений может даже помочь движку оптимизировать ваш код.</p>
    </div>
    <hr>
    <h2>Резюме</h2>
    <p>Мы можем объявить переменные для хранения данных с помощью ключевых слов <code>var</code>, <code>let</code> или <code>const</code>.</p>
    <ul>
        <li><code>let</code> – это современный способ объявления.</li>
        <li><code>var</code> – это устаревший способ объявления. Обычно мы вообще не используем его, но мы рассмотрим тонкие отличия от <code>let</code> в главе Устаревшее ключевое слово "var" на случай, если это всё-таки вам понадобится.</li>
        <li><code>const</code> – похоже на <code>let</code>, но значение переменной не может изменяться.</li>
    </ul>
    <hr>
    <h2>&#9989; Задачи</h2>
    <h3>1. Работа с переменными</h3>
    <ol>
        <li>Объявите две переменные: <code>admin</code> и <code>name</code>.</li>
        <li>Запишите строку "Джон" в переменную <code>name</code>.</li>
        <li>Скопируйте значение из переменной <code>name</code> в <code>admin</code>.</li>
        <li>Выведите на экран значение <code>admin</code>, используя функцию <code>alert</code> (должна показать «Джон»).</li>
    </ol>
    <button class="accordion">Решение <i class='fa fa-caret-down'></i></button>
    <div class="panel">
        <div class='important'>
            <p>В коде ниже каждая строка решения соответствует одному элементу в списке задач.</p>
            <div class='w3-code notranslate jsHigh'>
            let admin, name; // можно объявить две переменные через запятую<br>
                <br>
            name = "Джон";<br>
            admin = name;<br>
                <br>
            alert( admin ); // "Джон"
            </div>
        </div>
    </div>
    <hr>

    <h3>2. Придумайте правильные имена</h3>
    <ul>
        <li>Создайте переменную для названия нашей планеты. Как бы вы её назвали?</li>
        <li>Создайте переменную для хранения имени текущего посетителя сайта. Как бы вы назвали такую переменную?</li>
    </ul>
    <button class="accordion">Решение <i class='fa fa-caret-down'></i></button>
    <div class="panel">
        <div class='important'>
            <p><b>Переменная для названия нашей планеты.</b></p>
            <p>Например:</p>
            <div class='w3-code notranslate jsHigh'>
                let ourPlanetName = "Земля";
            </div>
            <p>Обратите внимание, мы могли бы использовать короткое имя <code>planet</code>, но тогда будет непонятно, о какой планете мы говорим. Лучше описать содержимое переменной подробнее, по крайней мере, до тех пор, пока имя переменной неСтанетСлишкомДлинным.</p>
            <p><b>Имя текущего посетителя:</b></p>
            <div class='w3-code notranslate jsHigh'>
                let currentUserName = "Джон";
            </div>
            <p>Опять же, мы могли бы укоротить название до <code>userName</code>, если мы точно знаем, что это текущий пользователь.</p>
            <p>Современные редакторы и автодополнение ввода в них позволяют легко писать длинные названия переменных. Не экономьте буквы. Имена, состоящие из трёх слов, вполне нормальны.</p>
            <p>Если в вашем редакторе нет автодополнения, воспользуйтесь другими.</p>
        </div>
    </div>
    <hr>

    <h3>3. Какие буквы (заглавные или строчные) использовать для имён констант?</h3>
    <p>Рассмотрим следующий код:</p>
    <div class='w3-example'>
        <div class='w3-code notranslate jsHigh'>
            const birthday = '18.04.1982';<br>
            const age = someCode(birthday);
        </div>
    </div>
    <p>У нас есть константа <code>birthday</code>, а также <code>age</code>, которая вычисляется при помощи некоторого кода, используя значение из <code>birthday</code> (в данном случае детали не имеют значения, поэтому код не рассматривается).</p>
    <p>Можно ли использовать заглавные буквы для имени <code>birthday</code>? А для <code>age</code>? Или одновременно для обеих переменных?</p>
    <div class='w3-example'>
        <div class='w3-code notranslate jsHigh'>
            const BIRTHDAY = '18.04.1982'; // использовать заглавные буквы?<br>
            const AGE = someCode(BIRTHDAY); // а здесь?
        </div>
    </div>
    <button class="accordion">Решение <i class='fa fa-caret-down'></i></button>
    <div class="panel">
        <div class='important'>
            <p>Обычно мы используем буквы в верхнем регистре для констант, которые «жёстко закодированы». Или, другими словами, когда значение известно до выполнения скрипта и записывается непосредственно в код.</p>
            <p>В нашем примере, <code>birthday</code> именно такая переменная. Поэтому мы можем использовать заглавные буквы.</p>
            <p>В отличие от предыдущей, переменная <code>age</code> вычисляется во время выполнения скрипта. Сегодня у нас один возраст, а через год уже совсем другой. Она является константой, потому что не изменяется при выполнении кода. Но она является «менее константной», чем <code>birthday</code>: она вычисляется, поэтому мы должны сохранить её в нижнем регистре.</p>
        </div>
    </div>
    <script src="../scripts/accordion.js"></script>
    <hr>
  <div class='w3-clear nextprev'>
    <a class='w3-left w3-btn' href='strict_mode.php'>&#10094; Prev</a>
    <a class='w3-right w3-btn' href='types.php'>Next &#10095;</a>
  </div>
</article>
<?php include '../include/addown_content.php'; ?>
</div>
<?php include '../include/rightbar.php'; ?>
<?php include '../include/footer.php'; ?>
